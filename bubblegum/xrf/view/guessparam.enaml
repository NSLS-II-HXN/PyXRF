# ######################################################################
# Copyright (c) 2014, Brookhaven Science Associates, Brookhaven        #
# National Laboratory. All rights reserved.                            #
#                                                                      #
# Redistribution and use in source and binary forms, with or without   #
# modification, are permitted provided that the following conditions   #
# are met:                                                             #
#                                                                      #
# * Redistributions of source code must retain the above copyright     #
#   notice, this list of conditions and the following disclaimer.      #
#                                                                      #
# * Redistributions in binary form must reproduce the above copyright  #
#   notice this list of conditions and the following disclaimer in     #
#   the documentation and/or other materials provided with the         #
#   distribution.                                                      #
#                                                                      #
# * Neither the name of the Brookhaven Science Associates, Brookhaven  #
#   National Laboratory nor the names of its contributors may be used  #
#   to endorse or promote products derived from this software without  #
#   specific prior written permission.                                 #
#                                                                      #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    #
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE       #
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,           #
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR   #
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  #
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING   #
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   #
# POSSIBILITY OF SUCH DAMAGE.                                          #
########################################################################

__author__ = 'Li Li'

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, CheckBox, ComboBox, PopupView,
                               SpinBox, ScrollArea, Window)
from enaml.layout.api import (hbox, vbox, HSplitLayout, VSplitLayout,
                              spacer, grid)
from enaml.core.api import Include, Looper
#<<<<<<< HEAD
from enaml.stdlib.fields import FloatField as DefaultFloatField
from enaml.layout.geometry import Box
#=======
#from enaml.stdlib.fields import FloatField
#from enaml.layout.geometry import Box
import json
from auto_enaml.api import AutoView

import os

from ..model.guessparam import format_dict
#>>>>>>> eric_autofit

import numpy as np
import six


enamldef FloatField(DefaultFloatField):
    submit_triggers = ['auto_sync']


enamldef GuessParamView(DockItem): param_view:
    attr param_model
    attr io_model
    attr plot_model

    Container:
        constraints = [
            vbox(
                top_cntr,
                hbox(e_label, spacer),
                hbox(e_f),
                hbox(pb12, pb13, pb14),
                hbox(pb10, pb11, spacer),
                #hbox(lb15),
            ),
        ]
        Container: top_cntr:
            ScrollArea:
                Form:
                    Looper: looper:
                        iterable << sorted(param_model.parameters.keys())
                        Label:
                            text = param_model.parameters[loop_item].description
                            tool_tip = param_model.parameters[loop_item].tool_tip
                        Container:
                            padding = Box(0, 0, 0, 0)
                            constraints = [hbox(ff, pb)]
                            FloatField: ff:
                                minimum := param_model.parameters[loop_item].min
                                maximum := param_model.parameters[loop_item].max
                                value := param_model.parameters[loop_item].value
                            PushButton: pb:
                                text = 'Default'
                                clicked ::
                                    ff.value = param_model.parameters[loop_item].default_value
                    row_spacing = -1
                    PushButton:
                        text = 'Edit Defaults'
                        clicked ::
                            ParameterEdit.parameter_model = param_model
                            ParameterEdit().show()

        Label: e_label:
            text = 'Enter elements below, e.g., K, Cu, Fe'
        Field: e_f:
            text := param_model.e_list

        PushButton: pb10:
            text = 'Save'
            clicked ::
                pass
                #param_model.save_param(param_model.parameters)
        PushButton: pb11:
            text = 'Save As'
            clicked ::
                path = FileDialogEx.get_save_file_name(param_view,
                        current_path=io_model.working_directory)
                if path:
                    param_model.save_file = path
                    param_model.save_as()
        PushButton: pb12:
            text = 'Find Peaks'
            #status_tip = 'Not Running.'
            clicked ::
                param_model.set_data(io_model.data)
                param_model.find_peak()
                param_model.data_for_plot()
                status_tip = 'Running'
                if (len(param_model.total_y) == 0):
                    #lb15.text = 'No auto fit result is available.'
                    pb13.enabled = False
                    pb14.enabled = False
                else:
                    #lb15.text = 'Auto fit is finished.'
                    pb13.enabled = True
                    pb14.enabled = True
                    plot_model.set_prefit_data(param_model.prefit_x, param_model.total_y, param_model.total_y_l)

        PushButton: pb13:
            text = 'Overlap to Spectrum'
            enabled = False
            checkable = True
            clicked ::
                if checked:
                    #plot_m.plot_autofit()
                    #plot_m.emission_line()
                    pb13.text = 'Remove Plot'
                    plot_model.show_autofit_opt = True
                else:
                    pb13.text = 'Overlap to Spectrum'
                    plot_model.show_autofit_opt = False


        PushButton: pb14:
            text = 'Show Results'
            enabled = False
            clicked ::
                PreFitResult.param_m = param_model
                PreFitResult.plot_m = plot_model
                PreFitResult().show()
        #Label: lb15:
        #    text = 'No auto fit result is available.'
            #max_length = 10
            #maximum_size = 100

def save_defaults(parameter_model):
    user_path = os.path.join(os.path.expanduser('~'), '.bubblegum',
                             'xrf_parameter_user.json')
    # format the dictionary
    dct = format_dict(parameter_model.parameters, parameter_model.element_list)
    json_out = json.dumps(dct)
    with open(user_path, 'w') as out_file:
        out_file.write(json_out)


enamldef ParameterEdit(Window):
    attr parameter_model
    destroy_on_close = False
    Container:
        ComboBox: cmb:
            items << sorted(parameter_model.parameters.keys())
            selected_item ::
                av.model = parameter_model.parameters[selected_item]
        AutoView: av:
            model = parameter_model.parameters.values()[0]
            initialized ::
                for o in objects:
                    o.label.tool_tip = str(o)
        PushButton: save:
            text = "Save changes to disk"
            clicked ::
                save_defaults(parameter_model)


enamldef PreFitResult(Window):
    attr param_m
    attr plot_m
    title = 'Results of Auto Peak Finding'
    Container:
        constraints = [
            vbox(
                plot_e,
                hbox(pb_bound, spacer),
                hbox(pb_import, spacer),
            ),
        ]
        Container: plot_e:
            ScrollArea:
                constraints = [height >= 200]
                Container:
                    Form:
                        Label:
                            text = '{:>2} {:>10} {:>10} {:>10}'.format('Z', 'lines',
                                                                       'peak INT', 'norm INT(%)')

                        Label:
                            text = 'select'

                        Looper: looper:
                            iterable << list(six.iterkeys(param_m.result_dict))
                            Label:
                                font = 'monospace'
                                #align = 'left'
                                text = '{:>2} {:>10} {:>10} {:>10}'.format(
                                    param_m.result_dict[loop_item]['z'],
                                    loop_item[0:5],
                                    np.around(param_m.result_dict[loop_item]['maxv']),
                                    set_low_bound(np.around(param_m.result_dict[loop_item]['norm'], 2))
                                    )
                            CheckBox: cb:
                                checkable = True
                                checked := param_m.result_dict[loop_item]['status']
                                clicked ::
                                    param_m.result_dict[loop_item]['status'] = checked
                                    param_m.result_dict[loop_item]['stat_copy'] = param_m.result_dict[loop_item]['status']
                                    param_m.data_for_plot()
                                    plot_m.set_prefit_data(param_m.prefit_x, param_m.total_y, param_m.total_y_l)
                                    plot_m._fig.canvas.draw()
        PushButton: pb_bound:
            text = 'Remove lines with value smaller than 1%'
            checkable = True
            clicked ::
                if checked:
                    param_m.choose_lbd = True
                    plot_m.set_prefit_data(param_m.prefit_x, param_m.total_y, param_m.total_y_l)
                    plot_m._fig.canvas.draw()
                else:
                    param_m.choose_lbd = False
                    plot_m.set_prefit_data(param_m.prefit_x, param_m.total_y, param_m.total_y_l)
                    plot_m._fig.canvas.draw()
        PushButton: pb_import:
            text = 'Use selected elements for peak fitting.'
            clicked ::
                param_m.get_activated_element()


def set_low_bound(value, thresh_v=1.0):
    """
    Return values only above given threshold.

    Parameters
    ----------
    value : float
    thresh_v : float, opt
        threshold value
    """
    if value <= thresh_v:
        return '< {}'.format(thresh_v)
    else:
        return value

