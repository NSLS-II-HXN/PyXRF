# ######################################################################
# Copyright (c) 2014, Brookhaven Science Associates, Brookhaven        #
# National Laboratory. All rights reserved.                            #
#                                                                      #
# Redistribution and use in source and binary forms, with or without   #
# modification, are permitted provided that the following conditions   #
# are met:                                                             #
#                                                                      #
# * Redistributions of source code must retain the above copyright     #
#   notice, this list of conditions and the following disclaimer.      #
#                                                                      #
# * Redistributions in binary form must reproduce the above copyright  #
#   notice this list of conditions and the following disclaimer in     #
#   the documentation and/or other materials provided with the         #
#   distribution.                                                      #
#                                                                      #
# * Neither the name of the Brookhaven Science Associates, Brookhaven  #
#   National Laboratory nor the names of its contributors may be used  #
#   to endorse or promote products derived from this software without  #
#   specific prior written permission.                                 #
#                                                                      #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    #
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE       #
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,           #
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR   #
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  #
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING   #
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   #
# POSSIBILITY OF SUCH DAMAGE.                                          #
########################################################################

__author__ = 'Li Li'

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, CheckBox, ComboBox, PopupView,
                               SpinBox, ScrollArea, Window)
from enaml.layout.api import (hbox, vbox, HSplitLayout, VSplitLayout,
                              spacer, grid)
from enaml.core.api import Include, Looper
from enaml.stdlib.fields import FloatField as DefaultFloatField
from enaml.layout.geometry import Box

import numpy as np
import six


enamldef FloatField(DefaultFloatField):
    submit_triggers = ['auto_sync']


enamldef GuessParamView(DockItem): param_view:
    attr param_m
    attr fileio_m
    attr plot_m

    Container:
        constraints = [
            vbox(
                top_cntr,
                hbox(e_label, spacer),
                hbox(e_f),
                hbox(pb12, pb13, pb14),
                hbox(pb10, pb11, spacer),
                #hbox(lb15),
            ),
        ]
        Container: top_cntr:
            ScrollArea:
                #constraints = [height <= 200]
                Container:
                    #padding = Box(0, 0, 0, 0)
                    constraints = [
                        grid(
                            [lbl1, fd1, pb1],
                            [lbl2, fd2, pb2],
                            [lbl3, fd3, pb3],
                            [lbl4, fd4, pb4],
                            [lbl5, fd5, pb5],
                            [lbl6, fd6, pb6],
                            [lbl7, fd7, pb7],
                            [lbl8, fd8, pb8],
                            [lbl9, fd9, pb9],
                        ),
                    ]

                    Label: lbl1:
                        text = 'E incident [keV]'
                    FloatField: fd1:
                        enabled = False
                        value := param_m.param_d['coherent_sct_energy']['value']
                        minimum = 0.
                        maximum_size = 100
                    PushButton: pb1:
                        text = 'user value'
                        checkable = True
                        checked = fd1.enabled
                        clicked ::
                            if checked:
                                fd1.enabled = True
                                pb1.text = 'default value'
                            else:
                                fd1.value = param_m.param_d_perm['coherent_sct_energy']['value']
                                fd1.enabled = False
                                pb1.text = 'user value'

                    Label: lbl2:
                        text = 'E low limit [keV]'
                    FloatField: fd2:
                        enabled = False
                        value := param_m.param_d['non_fitting_values']['energy_bound_low']
                        maximum_size = 100
                    PushButton: pb2:
                        text = 'user value'
                        checkable = True
                        checked = fd2.enabled
                        clicked ::
                            if checked:
                                fd2.enabled = True
                                pb2.text = 'default value'
                            else:
                                fd2.value = param_m.param_d_perm['non_fitting_values']['energy_bound_low']
                                fd2.enabled = False
                                pb2.text = 'user value'

                    Label: lbl3:
                        text = 'E high limit [keV]'
                    FloatField: fd3:
                        enabled = False
                        value := param_m.param_d['non_fitting_values']['energy_bound_high']
                        maximum_size = 100
                    PushButton: pb3:
                        text = 'user value'
                        checkable = True
                        checked = fd3.enabled
                        clicked ::
                            if checked:
                                fd3.enabled = True
                                pb3.text = 'default value'
                            else:
                                fd3.value = param_m.param_d_perm['non_fitting_values']['energy_bound_high']
                                fd3.enabled = False
                                pb3.text = 'user value'

                    Label: lbl4:
                        text = 'E Calib. Coef, a0'
                        tool_tip = 'E(channel) = a0 + a1*channel+ a2*channel**2'
                    FloatField: fd4:
                        enabled = False
                        value := param_m.param_d['e_offset']['value']
                        maximum_size = 100
                    PushButton: pb4:
                        text = 'user value'
                        checkable = True
                        checked = fd4.enabled
                        clicked ::
                            if checked:
                                fd4.enabled = True
                                pb4.text = 'default value'
                            else:
                                fd4.value = param_m.param_d_perm['e_offset']['value']
                                fd4.enabled = False
                                pb4.text = 'user value'

                    Label: lbl5:
                        text = 'E Calib. Coef, a1'
                        tool_tip = 'E(channel) = a0 + a1*channel+ a2*channel**2'
                    FloatField: fd5:
                        enabled = False
                        value := param_m.param_d['e_linear']['value']
                        maximum_size = 100
                    PushButton: pb5:
                        text = 'user value'
                        checkable = True
                        clicked ::
                            if checked:
                                fd5.enabled = True
                                pb5.text = 'default value'
                            else:
                                fd5.value = param_m.param_d_perm['e_linear']['value']
                                fd5.enabled = False
                                pb5.text = 'user value'

                    Label: lbl6:
                        text = 'E Calib. Coef, a2'
                        tool_tip = 'E(channel) = a0 + a1*channel+ a2*channel**2'
                    FloatField: fd6:
                        enabled = False
                        value := param_m.param_d['e_quadratic']['value']
                        maximum_size = 100
                    PushButton: pb6:
                        text = 'user value'
                        checkable = True
                        clicked ::
                            if checked:
                                fd6.enabled = True
                                pb6.text = 'default value'
                            else:
                                fd6.value = param_m.param_d_perm['e_quadratic']['value']
                                fd6.enabled = False
                                pb6.text = 'user value'

                    Label: lbl7:
                        text = 'fwhm Coef, b1 [keV]'
                        tool_tip = 'width**2 = (b1/2.3548)**2 + 3.85*b2*E, 3.85keV is electron-hole pair creation energy in silicon'
                    FloatField: fd7:
                        enabled = False
                        value := param_m.param_d['fwhm_offset']['value']
                        maximum_size = 100
                    PushButton: pb7:
                        text = 'user value'
                        checkable = True
                        clicked ::
                            if checked:
                                fd7.enabled = True
                                pb7.text = 'default value'
                            else:
                                fd7.value = param_m.param_d_perm['fwhm_offset']['value']
                                fd7.enabled = False
                                pb7.text = 'user value'

                    Label: lbl8:
                        text = 'fwhm Coef, b2'
                        tool_tip = 'width**2 = (b1/2.3548)**2 + 3.85*b2*E, 3.85keV is electron-hole pair creation energy in silicon'
                    FloatField: fd8:
                        enabled = False
                        value := param_m.param_d['fwhm_fanoprime']['value']
                        maximum_size = 100
                    PushButton: pb8:
                        text = 'user value'
                        checkable = True
                        clicked ::
                            if checked:
                                fd8.enabled = True
                                pb8.text = 'default value'
                            else:
                                fd8.value = param_m.param_d_perm['fwhm_fanoprime']['value']
                                fd8.enabled = False
                                pb8.text = 'user value'

                    Label: lbl9:
                        text = 'Compton fwhm Coef'
                    FloatField: fd9:
                        enabled = False
                        value := param_m.param_d['compton_fwhm_corr']['value']
                        maximum_size = 100
                    PushButton: pb9:
                        text = 'user value'
                        checkable = True
                        clicked ::
                            if checked:
                                fd9.enabled = True
                                pb9.text = 'default value'
                            else:
                                fd9.value = param_m.param_d_perm['compton_fwhm_corr']['value']
                                fd9.enabled = False
                                pb9.text = 'user value'

        Label: e_label:
            text = 'Enter elements below, e.g., K, Cu, Fe'
        Field: e_f:
            text := param_m.e_list

        PushButton: pb10:
            text = 'Save'
            clicked ::
                pass
                #param_m.save_param(param_m.param_d)
        PushButton: pb11:
            text = 'Save As'
            clicked ::
                path = FileDialogEx.get_save_file_name(param_view,
                        current_path=fileio_m.folder_name)
                if path:
                    param_m.save_file = path
                    param_m.save_as()
        PushButton: pb12:
            text = 'Find Peaks'
            #status_tip = 'Not Running.'
            clicked ::
                param_m.set_data(fileio_m.data)
                param_m.find_peak()
                param_m.data_for_plot()
                status_tip = 'Running'
                if (len(param_m.total_y) == 0):
                    #lb15.text = 'No auto fit result is available.'
                    pb13.enabled = False
                    pb14.enabled = False
                else:
                    #lb15.text = 'Auto fit is finished.'
                    pb13.enabled = True
                    pb14.enabled = True
                    plot_m.set_prefit_data(param_m.prefit_x, param_m.total_y, param_m.total_y_l)

        PushButton: pb13:
            text = 'Overlap to Spectrum'
            enabled = False
            checkable = True
            clicked ::
                if checked:
                    #plot_m.plot_autofit()
                    #plot_m.emission_line()
                    pb13.text = 'Remove Plot'
                    plot_m.show_autofit_opt = True
                else:
                    pb13.text = 'Overlap to Spectrum'
                    plot_m.show_autofit_opt = False

        PushButton: pb14:
            text = 'Show Results'
            enabled = False
            clicked ::
                PreFitResult.param_m = param_m
                PreFitResult.plot_m = plot_m
                PreFitResult().show()
        #Label: lb15:
        #    text = 'No auto fit result is available.'
            #max_length = 10
            #maximum_size = 100


enamldef PreFitResult(Window):
    attr param_m
    attr plot_m
    title = 'Results of Auto Peak Finding'
    Container:
        constraints = [
            vbox(
                plot_e,
                hbox(pb_bound, spacer),
                hbox(pb_import, spacer),
            ),
        ]
        Container: plot_e:
            ScrollArea:
                constraints = [height >= 200]
                Container:
                    Form:
                        Label:
                            text = '{:>2} {:>10} {:>10} {:>10}'.format('Z', 'lines',
                                                                       'peak INT', 'norm INT(%)')

                        Label:
                            text = 'select'

                        Looper: looper:
                            iterable << list(six.iterkeys(param_m.result_dict))
                            Label:
                                font = 'monospace'
                                #align = 'left'
                                text = '{:>2} {:>10} {:>10} {:>10}'.format(
                                    param_m.result_dict[loop_item]['z'],
                                    loop_item[0:5],
                                    np.around(param_m.result_dict[loop_item]['maxv']),
                                    set_low_bound(np.around(param_m.result_dict[loop_item]['norm'], 2))
                                    )
                            CheckBox: cb:
                                checkable = True
                                checked := param_m.result_dict[loop_item]['status']
                                clicked ::
                                    param_m.result_dict[loop_item]['status'] = checked
                                    param_m.result_dict[loop_item]['stat_copy'] = param_m.result_dict[loop_item]['status']
                                    param_m.data_for_plot()
                                    plot_m.set_prefit_data(param_m.prefit_x, param_m.total_y, param_m.total_y_l)
                                    plot_m._fig.canvas.draw()
        PushButton: pb_bound:
            text = 'Remove lines with value smaller than 1%'
            checkable = True
            clicked ::
                if checked:
                    param_m.choose_lbd = True
                    plot_m.set_prefit_data(param_m.prefit_x, param_m.total_y, param_m.total_y_l)
                    plot_m._fig.canvas.draw()
                else:
                    param_m.choose_lbd = False
                    plot_m.set_prefit_data(param_m.prefit_x, param_m.total_y, param_m.total_y_l)
                    plot_m._fig.canvas.draw()
        PushButton: pb_import:
            text = 'Use selected elements for peak fitting.'
            clicked ::
                param_m.get_activated_element()


def set_low_bound(value, thresh_v=1.0):
    """
    Return values only above given threshold.

    Parameters
    ----------
    value : float
    thresh_v : float, opt
        threshold value
    """
    if value <= thresh_v:
        return '< {}'.format(thresh_v)
    else:
        return value
