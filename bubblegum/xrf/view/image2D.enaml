from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, MPLCanvas, CheckBox, ComboBox,
                               ScrollArea, Window)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer
from enaml.core.api import Include, Looper

import six
import numpy as np
from matplotlib.figure import Figure


enamldef ImageMain(DockItem):
    attr io_model
    attr img_model
    attr img_model_adv
    Container:
        constraints = [
            vbox(
                #hbox(cbox_file, cbox_type, pb_choose, spacer),
                hbox(pb_all, spacer, plot_btn, check),
                canvas,
            ),
            #cbox_type.v_center == check.v_center,
        ]

        #ComboBox: cbox_file:
        #    items << [' '] + sorted(img_model.data_dict.keys())
        #    index := img_model.file_opt
        #    index = 0
        #ComboBox: cbox_type:
        #    items = ['Plot Type', 'ROI sum', 'Fit']
        #    index := img_model.plot_opt
        #    index = 0

        #PushButton: pb_choose:
        #    text = 'Select Elements'
        #    enabled = True
        #    #checkable = True
        #    clicked ::
                #ChooseElement.xrf_data = io_model.data_obj
                #ChooseElement.img_model = img_model
                #ChooseElement().show()
                #img_model.img_data = io_model.data_obj['XRF_roi']

        #ComboBox: cb_choose:
        #    items = io_model.data_obj['channel_names'].value.tolist()
        #    index = 0
        #ComboBox: plot_dim:
        #    items = ['1*1', '2*2', '3*3', '4*4']
        #    index = 0

        #CheckBox: cb_mode:
        #    text = 'Advanced Mode'
        #    clicked ::
        #        if checked:
        #            cbox_file.enabled = False
        #            cbox_type.enabled = False
        #            pb_choose.enabled = False
        #            pb_all.enabled = True
        #        else:
        #            cbox_file.enabled = True
        #            cbox_type.enabled = True
        #            pb_choose.enabled = True
        #            pb_all.enabled = False

        PushButton: pb_all:
            text = 'Select ROI'
            enabled = True
            clicked ::
                ChooseElementAdvanced.img_model = img_model_adv
                ChooseElementAdvanced().show()

        PushButton: plot_btn:
            text = 'Show Image'
            clicked ::
                img_model_adv.show_image()
        CheckBox: check:
            text = 'Toolbar Visible'
            checked := canvas.toolbar_visible
        MPLCanvas: canvas:
            figure << img_model_adv.fig
            #figure << figures[cbox_type.selected_item]


enamldef ChooseElementAdvanced(Window):
    attr img_model

    title = 'Results of Auto Peak Finding'
    Container:
        ComboBox: cb:
            items << sorted(img_model.data_dict.keys())
            #index := img_model.file_opt
            index = 0

        ScrollArea:
            constraints = [height >= 200]
            Container:
                Form:
                    Label:
                        text = '{:>20} {:>20}'.format('Name', 'Add/Remove')
                    Label:
                        pass
                    Looper: looper:
                        #iterable << img_model.img_data.keys()
                        #iterable << img_model.img_data.keys()
                        iterable << img_model.data_dict[cb.selected_item].keys()
                        Label:
                            font = 'monospace'
                            text = '{:>20}'.format(loop_item)
                        PushButton: element_btn:
                            text = 'ShowImg'
                            checkable = True
                            checked := img_model.stat_dict[cb.selected_item][loop_item]
                            clicked ::
                                if checked:
                                    img_model.stat_dict[cb.selected_item][loop_item] = True
                                    print('selected!')
                                    #img_model.show_image()
                                else:
                                    img_model.stat_dict[cb.selected_item][loop_item] = False
                                    print('Not selected!')
                                    #img_model.show_image()


enamldef ChooseElement(Window):
    attr img_model

    title = 'Results of Auto Peak Finding'
    Container:
        ScrollArea:
            constraints = [height >= 200]
            Container:
                Form:
                    Label:
                        text = '{:>20} {:>20}'.format('Name', 'Add/Remove')
                    Label:
                        pass
                    Looper: looper:
                        iterable << img_model.img_data.keys()
                        Label:
                            font = 'monospace'
                            text = '{:>20}'.format(loop_item)
                        PushButton: element_btn:
                            text = 'ShowImg'
                            checkable = True
                            checked = img_model.stat_dict[loop_item]
                            clicked ::
                                img_model.stat_dict[loop_item] = checked
