from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, MPLCanvas, CheckBox, ComboBox,
                               ScrollArea, Window)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer
from enaml.core.api import Include, Looper

import six
import numpy as np
from matplotlib.figure import Figure


fig1 = Figure()
ax1 = fig1.add_subplot(111)
ax1.plot([1, 2, 3])

fig2 = Figure()
ax2 = fig2.add_subplot(111)
ax2.plot([5, 2, 8, 1])


figures = {
    'ROI sum': fig1,
    'Fit': fig2,
}

enamldef ImageMain(DockItem):
    attr io_model
    attr draw_img
    Container:
        constraints = [
            vbox(
                hbox(load_file, cbox_file, cbox_type, pb_choose, plot_btn, check),
                canvas,
            ),
            cbox_type.v_center == check.v_center,
        ]
        PushButton: load_file:
            text = 'Load Data'
            clicked ::
                cbox_file.items = ['Choose Data'] + sorted(draw_img.data_dict.keys())
                draw_img.plot_status()
        ComboBox: cbox_file:
            #items = ['']
            index := draw_img.file_opt
            index = 0
        ComboBox: cbox_type:
            items = ['Plot Type', 'ROI sum', 'Fit']
            index := draw_img.plot_opt
            index = 0

        PushButton: pb_choose:
            text = 'Select Elements'
            enabled = True
            #checkable = True
            clicked ::
                #ChooseElement.xrf_data = io_model.data_obj
                ChooseElement.draw_img = draw_img
                ChooseElement().show()
                #draw_img.img_data = io_model.data_obj['XRF_roi']

        #ComboBox: cb_choose:
        #    items = io_model.data_obj['channel_names'].value.tolist()
        #    index = 0
        #ComboBox: plot_dim:
        #    items = ['1*1', '2*2', '3*3', '4*4']
        #    index = 0
        PushButton: plot_btn:
            text = 'Show Image'
            clicked ::
                draw_img.show_image()
        CheckBox: check:
            text = 'Toolbar Visible'
            checked := canvas.toolbar_visible
        MPLCanvas: canvas:
            figure << draw_img.fig
            #figure << figures[cbox_type.selected_item]


enamldef ChooseElement(Window):
    attr draw_img

    title = 'Results of Auto Peak Finding'
    Container:
        ScrollArea:
            constraints = [height >= 200]
            Container:
                Form:
                    Label:
                        text = '{:>20} {:>20}'.format('Name', 'Add/Remove')
                    Label:
                        pass
                    Looper: looper:
                        iterable << draw_img.img_data.keys()
                        Label:
                            font = 'monospace'
                            text = '{:>20}'.format(loop_item)
                        PushButton: element_btn:
                            text = 'ShowImg'
                            checkable = True
                            checked = draw_img.stat_dict[loop_item]
                            clicked ::
                                draw_img.stat_dict[loop_item] = checked
