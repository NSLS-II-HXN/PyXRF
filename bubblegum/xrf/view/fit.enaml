# ######################################################################
# Copyright (c) 2014, Brookhaven Science Associates, Brookhaven        #
# National Laboratory. All rights reserved.                            #
#                                                                      #
# Redistribution and use in source and binary forms, with or without   #
# modification, are permitted provided that the following conditions   #
# are met:                                                             #
#                                                                      #
# * Redistributions of source code must retain the above copyright     #
#   notice, this list of conditions and the following disclaimer.      #
#                                                                      #
# * Redistributions in binary form must reproduce the above copyright  #
#   notice this list of conditions and the following disclaimer in     #
#   the documentation and/or other materials provided with the         #
#   distribution.                                                      #
#                                                                      #
# * Neither the name of the Brookhaven Science Associates, Brookhaven  #
#   National Laboratory nor the names of its contributors may be used  #
#   to endorse or promote products derived from this software without  #
#   specific prior written permission.                                 #
#                                                                      #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    #
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE       #
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,           #
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR   #
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  #
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING   #
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   #
# POSSIBILITY OF SUCH DAMAGE.                                          #
########################################################################

import numpy as np

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, CheckBox, ComboBox,
                               ScrollArea, Window, GroupBox, RadioButton)

from enaml.widgets.api import RadioButton as DefaultRadioButton

from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer
from auto_enaml.api import AutoView
from enaml.stdlib.fields import FloatField
from enaml.layout.geometry import Box

from bubblegum.xrf.model.fit_spectrum import Param, fit_strategy_list
from bubblegum.xrf.model.guessparam import format_dict


enamldef RadioButton(DefaultRadioButton):
    minimum_size = (80, 20)

enamldef LabelTitle(Label):
    maximum_size = 80
    align = 'left'


enamldef FitView(DockItem): fit_view:
    attr io_model
    attr param_model
    attr plot_model
    attr fit_model

    Container:
        constraints = [
            vbox(
                #param_gb,
                #lbl0,
                #hbox(lbl1, cb1, spacer),
                #hbox(lbl2, cb2, spacer),
                #hbox(lbl3, cb3, spacer),
                hbox(gb_strategy),
                hbox(pb_fit, pb_plot, spacer),
                hbox(btn_edit, spacer),
            ),
        ]
        #GroupBox: param_gb:
        #    constraints = [
        #        vbox(
        #            hbox(pb_previous, pb_param, spacer),
        #            hbox(param_status, spacer),
        #        ),
        #    ]
        #    PushButton: pb_previous:
        #        text = 'Import Parameters'
        #        clicked ::
        #            fit_model.param_dict = param_model.read_pre_saved() #param_model.param_new
        #            param_status.text = 'Use fitting parameters from previous step.'
        #    PushButton: pb_param:
        #        text = 'Import Parameters from File'
        #        clicked ::
        #            param_path = FileDialogEx.get_open_file_name(fit_view)
        #            if param_path:
        #                fit_model.file_path = param_path
        #                param_status.text = fit_model.file_status
        #    Label: param_status:
        #        text = 'No file is loaded.'

        #Label: lbl0:
        #    text = 'Fitting Strategy'
        #PushButton: default_btn:
        #    text = 'Default'
        GroupBox: gb_strategy:
            constraints = [vbox(ct_0,
                                ct_1,
                                ct_2,
                                ct_3,
                                )]

            GroupBox: ct_0:
                enabled = False
                padding = Box(5, 5, 5, 5)
                constraints = [hbox(title_lb0, title_lb1, title_lb2, title_lb3, title_lb4)]
                LabelTitle: title_lb0:
                    text = 'None \n '
                LabelTitle: title_lb1:
                    text = 'Global with \n compton'
                LabelTitle: title_lb2:
                    text = 'Global with \n more'
                LabelTitle: title_lb3:
                    text = 'Energy \n calibration'
                LabelTitle: title_lb4:
                    text = 'Intensity \n only'

            Container: ct_1:
                padding = Box(5, 5, 5, 5)
                constraints = [hbox(lb_1, rb_1, rb_1a, rb_1b, rb_1c, rb_1d, spacer)]
                Label: lb_1:
                    text = 'Step 1'
                    tool_tip = 'Default as Global with compton'
                RadioButton: rb_1:
                    text = ''
                    clicked ::
                        fit_model.fit_strategy1 = 0
                RadioButton: rb_1a:
                    text = ''
                    checked = True
                    clicked ::
                        fit_model.fit_strategy1 = 1
                RadioButton: rb_1b:
                    text = ''
                    clicked ::
                        fit_model.fit_strategy1 = 2
                RadioButton: rb_1c:
                    text = ''
                    clicked ::
                        fit_model.fit_strategy1 = 3
                RadioButton: rb_1d:
                    text = ''
                    clicked ::
                        fit_model.fit_strategy1 = 4

            Container: ct_2:
                padding = Box(5, 5, 5, 5)
                constraints = [hbox(lb_2, rb_2, rb_2a, rb_2b, rb_2c, rb_2d, spacer)]
                Label: lb_2:
                    text = 'Step 2'
                    tool_tip = 'Default as Intensity only'
                RadioButton: rb_2:
                    text = ''
                    clicked ::
                        fit_model.fit_strategy2 = 0
                RadioButton: rb_2a:
                    text = ''
                    #checked = True
                    clicked ::
                        fit_model.fit_strategy2 = 1
                RadioButton: rb_2b:
                    text = ''
                    clicked ::
                        fit_model.fit_strategy2 = 2
                RadioButton: rb_2c:
                    text = ''
                    clicked ::
                        fit_model.fit_strategy2 = 3
                RadioButton: rb_2d:
                    text = ''
                    checked = True
                    clicked ::
                        fit_model.fit_strategy2 = 4

            Container: ct_3:
                padding = Box(5, 5, 5, 5)
                constraints = [hbox(lb_3, rb_3, rb_3a, rb_3b, rb_3c, rb_3d, spacer)]
                Label: lb_3:
                    text = 'Step 3'
                    tool_tip = 'Default as None'
                RadioButton: rb_3:
                    text = ''
                    checked = True
                    clicked ::
                        fit_model.fit_strategy3 = 0
                RadioButton: rb_3a:
                    text = ''
                    clicked ::
                        fit_model.fit_strategy3 = 1
                RadioButton: rb_3b:
                    text = ''
                    clicked ::
                        fit_model.fit_strategy3 = 2
                RadioButton: rb_3c:
                    text = ''
                    clicked ::
                        fit_model.fit_strategy3 = 3
                RadioButton: rb_3d:
                    text = ''
                    clicked ::
                        fit_model.fit_strategy3 = 4

        #Label: lbl1:
        #    text = 'Step 1'
        #ComboBox: cb1:
        #    items = [''] + fit_strategy_list
        #    index = 0
        #    index >> fit_model.fit_strategy1
        #Label: lbl2:
        #    text = 'Step 2'
        #ComboBox: cb2:
        #    items = [''] + fit_strategy_list
        #    index = 0
        #    index >> fit_model.fit_strategy2
        #Label: lbl3:
        #    text = 'Step 3'
        #ComboBox: cb3:
        #    items = [''] + fit_strategy_list
        #    index = 0
        #    index >> fit_model.fit_strategy3

        PushButton: pb_fit:
            text = 'Fit'
            clicked ::
                #fit_model.fit_data()
                #fit_model.define_range()
                #fit_model.escape_peak()

                fit_model.fit_multiple()

                pb_plot.enabled = True
                plot_model.fit_x = fit_model.fit_x
                plot_model.fit_y = fit_model.fit_y
                plot_model.fit_all = fit_model.comps
                plot_model.residual = fit_model.residual
                plot_model.plot_fit()

                param_model.get_param(fit_model.param_dict)
                param_model.update_name_list()
                ParameterEdit.parameter_model = param_model

        PushButton: pb_plot:
            text = 'Overlap to Spectrum'
            checkable = True
            enabled = False
            clicked ::
                if checked:
                    plot_model.show_fit_opt = True
                    pb_plot.text = 'Remove Plot'
                else:
                    plot_model.show_fit_opt = False
                    pb_plot.text = 'Overlap to Spectrum'

        PushButton: btn_edit:
            text = 'Edit Defaults'
            clicked ::
                #ParameterEdit_old.parameter_model = fit_model.param_dict
                #ParameterEdit_old.param = Param
                #ParameterEdit_old().show()
                #param_model.get_param(param_model.param_new)

                ParameterEdit().show()


enamldef ParameterEdit(Window):
    attr parameter_model
    destroy_on_close = False
    Container:
        padding = Box(5, 5, 5, 5)
        ComboBox: cmb:
            items << sorted(parameter_model.parameters.keys())
            selected_item ::
                av.model = parameter_model.parameters[selected_item]
        AutoView: av:
            model = parameter_model.parameters.values()[0]
            padding = 30
        PushButton: save:
            text = "Save changes to disk"
            clicked ::
                parameter_model.param_new = format_dict(parameter_model.parameters,
                                                        parameter_model.element_list)
                parameter_model.save()
                #save_defaults(parameter_model)


def save_defaults(parameter_model):
    user_path = os.path.join(os.path.expanduser('~'), '.bubblegum',
                             'xrf_parameter_user.json')
    # format the dictionary
    dct = format_dict(parameter_model.parameters, parameter_model.element_list)
    json_out = json.dumps(dct)
    with open(user_path, 'w') as out_file:
        out_file.write(json_out)


# to be deleted
enamldef ParameterEdit_old(Window):
    attr parameter_model
    attr param
    destroy_on_close = False
    Container:
        ComboBox: cmb:
            items << sorted(parameter_model.keys())
            selected_item ::
                #print(str(parameter_model[selected_item]['value']))
                param.name = selected_item
                param.value = parameter_model[selected_item]['value']
                param.min = parameter_model[selected_item]['min']
                param.max = parameter_model[selected_item]['max']
                param.fit_with_tail = parameter_model[selected_item]['fit_with_tail']
                param.free_more = parameter_model[selected_item]['free_more']
                param.adjust_element = parameter_model[selected_item]['adjust_element']
                param.e_calibration = parameter_model[selected_item]['e_calibration']
                param.linear = parameter_model[selected_item]['linear']

        Form:
            #Label: lb1:
            #    text = 'name'
            #Field: fd1:
            #    text = param.name
            Label: lb2:
                text = 'value'
            FloatField: fd2:
                value := param.value
            Label: lb3:
                text = 'min'
            FloatField: fd3:
                value := param.min
            Label: lb4:
                text = 'max'
            FloatField: fd4:
                value := param.max
            Label: lb5:
                text = 'fit_with_tail'
            Field: fd5:
                text := param.fit_with_tail
            Label: lb6:
                text = 'free_more'
            Field: fd6:
                text := param.free_more
            Label: lb7:
                text = 'e_calibration'
            Field: fd7:
                text := param.e_calibration
            Label: lb8:
                text = 'linear'
            Field: fd8:
                text := param.linear
            Label: lb9:
                text = 'adjust_element'
            Field: fd9:
                text := param.adjust_element

        #AutoView: av:
        #    model = parameter_model.values()[0]
        #    initialized ::
        #        pass
        #        #for o in objects:
        #        #    o.label.tool_tip = str(o)
        PushButton: save:
            text = "Save changes to disk"
            clicked ::
                pass
                #save_defaults(parameter_model)
